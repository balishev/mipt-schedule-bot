import json
import logging
import re
import os
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ config.py
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    import config
except ImportError:
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π config –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    class Config:
        BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
        DEBUG = False
        LOG_LEVEL = "INFO"
    
    config = Config()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
def load_schedule_data():
    try:
        with open('data/correct_schedules.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Error loading schedule data: {e}")
        return {}

def load_registration_structure():
    try:
        with open('data/registration_structure.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Error loading registration structure: {e}")
        return {}

schedule_data = load_schedule_data()
registration_structure = load_registration_structure()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def format_time(time_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ '1355 - 1520' –≤ '13:55 - 15:20'"""
    try:
        if ' - ' in time_str:
            start, end = time_str.split(' - ')
            if len(start) == 4 and start.isdigit():
                start = f"{start[:2]}:{start[2:]}"
            if len(end) == 4 and end.isdigit():
                end = f"{end[:2]}:{end[2:]}"
            return f"{start} - {end}"
        return time_str
    except:
        return time_str

def get_file_key_from_group(group_name, level, course, faculty_short):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ file_key –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    try:
        if level in registration_structure and course in registration_structure[level]:
            for faculty, data in registration_structure[level][course].items():
                if faculty == faculty_short and group_name in data['groups']:
                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
                    return f"{level}_{course}_{faculty}"
        return f"{level}_{course}"
    except:
        return f"{level}_{course}"

def find_group_schedule(group_name, level, course):
    """–ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã –≤ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info(f"Searching schedule for group: {group_name}, level: {level}, course: {course}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ schedule_data
        file_key = f"{level} {course} –ö–£–†–° –û–°–ï–ù–¨ 2025-2026 –≥"
        logger.info(f"Looking for file key: {file_key}")
        
        if file_key in schedule_data:
            logger.info(f"Found file key: {file_key}")
            course_data = schedule_data[file_key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø
            group_exists = False
            if 'groups' in course_data and group_name in course_data['groups'].values():
                logger.info(f"Group {group_name} exists in groups list")
                group_exists = True
            
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            if group_exists:
                logger.info(f"Returning full course schedule for {group_name}")
                return course_data
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—â–µ–º –≥—Ä—É–ø–ø—É –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ –¥–Ω—è–º
            if 'schedule' in course_data:
                logger.info(f"Schedule found for {file_key}, searching for group in schedule")
                for day_name, day_data in course_data['schedule'].items():
                    logger.info(f"Checking day: {day_name}")
                    for faculty_name, faculty_groups in day_data.items():
                        logger.info(f"Checking faculty: {faculty_name}")
                        if group_name in faculty_groups:
                            logger.info(f"Found group {group_name} in faculty {faculty_name} on day {day_name}")
                            # –ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞
                            return course_data
            else:
                logger.info(f"No 'schedule' key found in {file_key}")
            
            logger.info(f"Group {group_name} not found in schedule or groups list")
        else:
            logger.info(f"File key {file_key} not found in schedule_data")
            logger.info(f"Available keys: {list(schedule_data.keys())}")
        
        return None
    except Exception as e:
        logger.error(f"Error finding schedule for group {group_name}: {e}")
        return None

def format_schedule_for_day(group_schedule, day_name, group_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        logger.info(f"Formatting schedule for group {group_name}, day {day_name}")
        
        if not group_schedule:
            logger.warning(f"No schedule data found for group {group_name}")
            return ("üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã\n\n"
                   "‚ÑπÔ∏è *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
                   "‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫—É—Ä—Å–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
                   "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä—É–≥–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏\n"
                   "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–æ –∫—É—Ä—Å–∞
        if 'schedule' in group_schedule:
            logger.info(f"Found course schedule data, looking for day {day_name}")
            if day_name in group_schedule['schedule']:
                day_data = group_schedule['schedule'][day_name]
                logger.info(f"Found day {day_name} in schedule")
                
                # –ò—â–µ–º –≥—Ä—É–ø–ø—É –≤ –¥–∞–Ω–Ω—ã—Ö –¥–Ω—è
                for faculty_name, faculty_groups in day_data.items():
                    logger.info(f"Checking faculty {faculty_name} for group {group_name}")
                    if group_name in faculty_groups:
                        logger.info(f"Found group {group_name} in faculty {faculty_name}")
                        lessons = faculty_groups[group_name]
                        result = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name}:*\n\n"
                        
                        if lessons:
                            logger.info(f"Found {len(lessons)} lessons for {group_name}")
                            for lesson in lessons:
                                time_formatted = format_time(lesson['time'])
                                subject = lesson.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                                classroom = lesson.get('classroom', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                                teacher = lesson.get('teacher', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                                
                                result += f"‚è∞ *{time_formatted}*\n"
                                result += f"üìö {subject}\n"
                                if classroom and classroom != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                                    result += f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {classroom}\n"
                                if teacher and teacher != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                                    result += f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n"
                                result += "---\n"
                        else:
                            logger.info(f"No lessons found for {group_name} on {day_name}")
                            result += f"üì≠ –ù–∞ {day_name} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
                            result += "‚ÑπÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"
                        
                        return result
                else:
                    logger.info(f"Group {group_name} not found in any faculty for day {day_name}")
            else:
                logger.warning(f"Day {day_name} not found in schedule")
            
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–Ω–µ, –Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫—É—Ä—Å–µ
            if 'groups' in group_schedule and group_name in group_schedule['groups'].values():
                logger.info(f"Group {group_name} exists in course but no lessons found for {day_name}")
                return (f"üì≠ –ù–∞ {day_name} –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                       "‚ÑπÔ∏è *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
                       "‚Ä¢ –î–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å\n"
                       "‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–Ω–µ–π\n"
                       "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä—É–≥–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏")
            else:
                logger.warning(f"Group {group_name} not found in course groups")
                return (f"üì≠ –ù–∞ {day_name} –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                       "‚ÑπÔ∏è *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
                       "‚Ä¢ –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
                       "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã\n"
                       "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        
        else:
            logger.warning(f"Unknown schedule data structure: {group_schedule}")
            return ("üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                   "‚ÑπÔ∏è *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
                   "‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫—É—Ä—Å–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
                   "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        logger.error(f"Error formatting schedule: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    keyboard = [
        [InlineKeyboardButton("üéì –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register')],
        [InlineKeyboardButton("üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='view_schedule')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='info')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        "üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ú–§–¢–ò!*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.\n\n"
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º —É—Ä–æ–≤–Ω—è, –∫—É—Ä—Å–∞, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –≥—Ä—É–ø–ø—ã\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏—è—Ö\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –æ–±—É—á–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üéì –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç", callback_data='level_–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç')],
        [InlineKeyboardButton("üéì –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", callback_data='level_–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üéì *–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è:*\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def select_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –æ–±—É—á–µ–Ω–∏—è (–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç/–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞)"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    level = query.data.replace('level_', '')
    
    if user_id not in user_data:
        user_data[user_id] = {}
    
    user_data[user_id]['level'] = level
    
    keyboard = []
    if level in registration_structure:
        for course in registration_structure[level].keys():
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
            total_groups = 0
            for faculty_data in registration_structure[level][course].values():
                total_groups += len(faculty_data['groups'])
            
            button_text = f"–ö—É—Ä—Å {course} ({total_groups} –≥—Ä—É–ø–ø)"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f'course_{course}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='register')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    level_name = "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" if level == "–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" else "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"
    
    await query.edit_message_text(
        f"üéì *–£—Ä–æ–≤–µ–Ω—å: {level_name}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def select_course(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–±–æ—Ä –∫—É—Ä—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    course = query.data.replace('course_', '')
    level = user_data[user_id]['level']
    
    user_data[user_id]['course'] = course
    
    keyboard = []
    if level in registration_structure and course in registration_structure[level]:
        for faculty_short, faculty_data in registration_structure[level][course].items():
            groups_count = len(faculty_data['groups'])
            faculty_name = faculty_data['full_name']
            button_text = f"{faculty_short} ({groups_count} –≥—Ä—É–ø–ø)"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f'faculty_{faculty_short}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'level_{level}')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    level_name = "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" if level == "–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" else "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"
    
    await query.edit_message_text(
        f"üéì *–£—Ä–æ–≤–µ–Ω—å:* {level_name}\n"
        f"üìö *–ö—É—Ä—Å:* {course}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def select_faculty(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    if query.data.startswith('faculty_'):
        faculty_short = query.data.replace('faculty_', '')
        level = user_data[user_id]['level']
        course = user_data[user_id]['course']
        
        user_data[user_id]['faculty'] = faculty_short
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        context.user_data['group_page'] = 0
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        level = user_data[user_id]['level']
        course = user_data[user_id]['course']
        faculty_short = user_data[user_id]['faculty']
    
    keyboard = []
    if (level in registration_structure and
        course in registration_structure[level] and
        faculty_short in registration_structure[level][course]):
        
        groups = registration_structure[level][course][faculty_short]['groups']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ 10 –≥—Ä—É–ø–ø –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        current_page = context.user_data.get('group_page', 0)
        groups_per_page = 10
        start_idx = current_page * groups_per_page
        end_idx = start_idx + groups_per_page
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page_info = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{(len(groups) + groups_per_page - 1) // groups_per_page}"
        
        for group in groups[start_idx:end_idx]:
            keyboard.append([InlineKeyboardButton(f"üìö {group}", callback_data=f'group_{group}')])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if current_page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='group_prev_page'))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if len(groups) > groups_per_page:
            nav_buttons.append(InlineKeyboardButton(f"üìÑ {page_info}", callback_data='page_info'))
        
        if end_idx < len(groups):
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data='group_next_page'))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã", callback_data='search_in_groups')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'course_{course}')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    level_name = "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" if level == "–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" else "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"
    faculty_full = registration_structure[level][course][faculty_short]['full_name']
    
    await query.edit_message_text(
        f"üéì *–£—Ä–æ–≤–µ–Ω—å:* {level_name}\n"
        f"üìö *–ö—É—Ä—Å:* {course}\n"
        f"üè´ *–§–∞–∫—É–ª—å—Ç–µ—Ç:* {faculty_short} ({faculty_full})\n\n"
        f"üë• *–ì—Ä—É–ø–ø—ã:* {len(groups)} –≤—Å–µ–≥–æ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_group_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≥—Ä—É–ø–ø"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    action = query.data
    
    current_page = context.user_data.get('group_page', 0)
    
    if action == 'group_next_page':
        context.user_data['group_page'] = current_page + 1
    elif action == 'group_prev_page':
        context.user_data['group_page'] = max(0, current_page - 1)
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
    await select_faculty(update, context)

async def select_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    group_name = query.data.replace('group_', '')
    
    user_data[user_id]['group'] = group_name
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—É—Ç–∏
    level = user_data[user_id]['level']
    course = user_data[user_id]['course']
    faculty_short = user_data[user_id]['faculty']
    
    level_name = "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" if level == "–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" else "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"
    faculty_full = registration_structure[level][course][faculty_short]['full_name']
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='view_schedule')],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data='register')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    registration_text = (
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üéì –£—Ä–æ–≤–µ–Ω—å: {level_name}\n"
        f"üìö –ö—É—Ä—Å: {course}\n"
        f"üè´ –§–∞–∫—É–ª—å—Ç–µ—Ç: {faculty_short} ({faculty_full})\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {group_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."
    )
    
    await query.edit_message_text(
        registration_text,
        reply_markup=reply_markup,
        parse_mode=None
    )

async def view_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if user_id not in user_data or 'level' not in user_data[user_id]:
        keyboard = [[InlineKeyboardButton("üéì –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ùó *–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
    
    keyboard = []
    for day in days:
        keyboard.append([InlineKeyboardButton(f"üìÖ {day}", callback_data=f'day_{day}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—É—Ç–∏
    level = user_data[user_id]['level']
    course = user_data[user_id]['course']
    faculty_short = user_data[user_id].get('faculty', '–ù–µ –≤—ã–±—Ä–∞–Ω')
    group = user_data[user_id].get('group', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
    
    level_name = "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" if level == "–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" else "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"
    
    selection_info = f"üéì *–£—Ä–æ–≤–µ–Ω—å:* {level_name}\nüìö *–ö—É—Ä—Å:* {course}"
    
    if faculty_short != '–ù–µ –≤—ã–±—Ä–∞–Ω':
        faculty_full = registration_structure[level][course][faculty_short]['full_name']
        selection_info += f"\nüè´ *–§–∞–∫—É–ª—å—Ç–µ—Ç:* {faculty_short} ({faculty_full})"
    
    selection_info += f"\nüë• *–ì—Ä—É–ø–ø–∞:* {group}"
    
    await query.edit_message_text(
        f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n\n"
        f"{selection_info}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_day_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    day_name = query.data.replace('day_', '')
    
    if user_id not in user_data:
        await query.edit_message_text('‚ùó –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—É—Ç–∏
    level = user_data[user_id]['level']
    course = user_data[user_id]['course']
    faculty_short = user_data[user_id].get('faculty', '')
    group = user_data[user_id].get('group', '')
    
    level_name = "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" if level == "–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç" else "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"
    
    selection_info = f"üéì *–£—Ä–æ–≤–µ–Ω—å:* {level_name}\nüìö *–ö—É—Ä—Å:* {course}"
    
    if faculty_short:
        faculty_full = registration_structure[level][course][faculty_short]['full_name']
        selection_info += f"\nüè´ *–§–∞–∫—É–ª—å—Ç–µ—Ç:* {faculty_short} ({faculty_full})"
    
    selection_info += f"\nüë• *–ì—Ä—É–ø–ø–∞:* {group if group else '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}"
    
    message = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name}*\n"
    message += f"{selection_info}\n\n"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    if group and group != '–ù–µ –≤—ã–±—Ä–∞–Ω–∞':
        logger.info(f"Getting schedule for group: {group}, level: {level}, course: {course}, day: {day_name}")
        group_schedule = find_group_schedule(group, level, course)
        schedule_text = format_schedule_for_day(group_schedule, day_name, group)
        message += schedule_text
    else:
        message += "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    
    keyboard = [
        [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data='view_schedule')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(message) > 4000:
        parts = []
        current_part = ""
        lines = message.split('\n')
        
        for line in lines:
            if len(current_part) + len(line) + 1 < 4000:
                current_part += line + '\n'
            else:
                parts.append(current_part)
                current_part = line + '\n'
        
        if current_part:
            parts.append(current_part)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await query.edit_message_text(parts[0], reply_markup=reply_markup, parse_mode='Markdown')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for part in parts[1:]:
            await context.bot.send_message(chat_id=query.message.chat_id, text=part, parse_mode='Markdown')
    else:
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    query = update.callback_query
    await query.answer()
    
    info_text = (
        "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*\n\n"
        "üéì *–ë–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ú–§–¢–ò*\n"
        "–í–µ—Ä—Å–∏—è: 2.0 (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)\n\n"
        "üìä *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*\n"
    )
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–ø–ø
    total_groups = 0
    for level_data in registration_structure.values():
        for course_data in level_data.values():
            for faculty_data in course_data.values():
                total_groups += len(faculty_data['groups'])
    
    info_text += f"‚Ä¢ –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {total_groups}\n"
    
    info_text += (
        "\nüîß *–§—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º —É—Ä–æ–≤–Ω—è, –∫—É—Ä—Å–∞, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –≥—Ä—É–ø–ø—ã\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–Ω—è–º\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π\n\n"
        "üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @your_support_username"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(info_text, reply_markup=reply_markup, parse_mode='Markdown')

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üéì –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register')],
        [InlineKeyboardButton("üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='view_schedule')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='info')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_search_in_groups(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    context.user_data['search_in_groups'] = True
    context.user_data['search_user_id'] = user_id
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã", callback_data='back_to_groups')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîç *–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
        "–ü—Ä–∏–º–µ—Ä: '501', '–ú05', '404'\n\n"
        "üìù *–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º:*",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
    if context.user_data.get('search_in_groups') and context.user_data.get('search_user_id') == user_id:
        # –ü–æ–∏—Å–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        level = user_data[user_id]['level']
        course = user_data[user_id]['course']
        faculty_short = user_data[user_id]['faculty']
        
        groups = registration_structure[level][course][faculty_short]['groups']
        
        results = []
        for group in groups:
            if message_text.lower() in group.lower():
                results.append(group)
        
        if results:
            keyboard = []
            for group in results[:10]:
                keyboard.append([InlineKeyboardButton(f"üìö {group}", callback_data=f'group_{group}')])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data='search_in_groups')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{message_text}':*\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} –≥—Ä—É–ø–ø\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{message_text}' –≥—Ä—É–ø–ø –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å:",
                parse_mode='Markdown'
            )
    
    else:
        await update.message.reply_text(
            "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é."
        )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    TOKEN = config.BOT_TOKEN
    
    if TOKEN == "YOUR_BOT_TOKEN_HERE" or not TOKEN:
        print("‚ùó –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª config.example.py –≤ config.py")
        print("2. –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN_HERE' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –≤ config.py")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    if hasattr(config, 'LOG_LEVEL'):
        logging.getLogger().setLevel(getattr(logging, config.LOG_LEVEL.upper(), logging.INFO))
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(register, pattern='^register$'))
    application.add_handler(CallbackQueryHandler(select_level, pattern='^level_'))
    application.add_handler(CallbackQueryHandler(select_course, pattern='^course_'))
    application.add_handler(CallbackQueryHandler(select_faculty, pattern='^faculty_'))
    application.add_handler(CallbackQueryHandler(handle_group_pagination, pattern='^group_(next|prev)_page$'))
    application.add_handler(CallbackQueryHandler(select_group, pattern='^group_'))
    application.add_handler(CallbackQueryHandler(view_schedule, pattern='^view_schedule$'))
    application.add_handler(CallbackQueryHandler(show_day_schedule, pattern='^day_'))
    application.add_handler(CallbackQueryHandler(show_info, pattern='^info$'))
    application.add_handler(CallbackQueryHandler(main_menu, pattern='^main_menu$'))
    application.add_handler(CallbackQueryHandler(handle_search_in_groups, pattern='^search_in_groups$'))
    application.add_handler(CallbackQueryHandler(select_faculty, pattern='^back_to_groups$'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    print("üîç –í–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
    
    application.run_polling()

if __name__ == '__main__':
    main()